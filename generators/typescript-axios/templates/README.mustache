# Onfido Node.js Library

The official Node.js library for integrating with the Onfido API.

Documentation can be found at <https://documentation.onfido.com>

This library is only for use on the backend, as it uses Onfido API tokens which must be kept secret. If you do need to collect applicant data in the frontend of your application, we recommend that you use the Onfido SDKs: [iOS](https://github.com/onfido/onfido-ios-sdk), [Android](https://github.com/onfido/onfido-android-sdk), [Web](https://github.com/onfido/onfido-sdk-ui), and [React Native](https://github.com/onfido/react-native-sdk).

This version uses Onfido API {{ apiVersion }}. Refer to our [API versioning guide](https://developers.onfido.com/guide/api-versioning-policy#client-libraries) for details of which client library versions use which versions of the API.

## Installation

For npm:

```sh
npm install @onfido/api
```

For Yarn:

```sh
yarn add @onfido/api
```

## Getting started

Require the package:

```js
const { DefaultApi, Configuration, WebhookEventVerifier } = require("@onfido/api");
```

For TypeScript users, types are available as well:

```ts
import { DefaultApi, Configuration, WebhookEventVerifier } from "@onfido/api";
import { isAxiosError } from "axios";

```

Configure with your API token and region:

```js
const onfido = new DefaultApi({
  apiToken: process.env.ONFIDO_API_TOKEN,
  // Supports Region.EU, Region.US and Region.CA
  region: Region.EU
});
```

Using with `async`/`await` (in an `async function`):

```js
try {
  const applicant = await onfido.createApplicant({
    first_name: "Jane",
    last_name: "Doe",
    location: {
      ip_address: "127.0.0.1",
      country_of_residence: "GBR"
    }
  });

  const check = await onfido.createCheck({
    applicantId: applicant.data.id,
    reportNames: ["identity_enhanced"]
  });

  return check;
} catch (error) {
  const error_details = error.response?.data.error;

  if (isAxiosError(error) && error_details)  {
    // An error response was received from the Onfido API, extra info is available.
    console.log(error_details.message);
    console.log(error_details.type);
  }
  else
  {
    // No response was received for some reason e.g. a network error.
    console.log(error.message);
  }
}
```

Using with promises:

```js
onfido
  .createApplicant({
    first_name: "Jane",
    last_name: "Doe",
    location: {
      ip_address: "127.0.0.1",
      country_of_residence: "GBR"
    }
  })
  .then(applicant =>
    onfido.createCheck({
      applicant_id: applicant.data.id,
      report_names: ["identity_enhanced"]
    })
  )
  .then(check =>
    // Handle successfully created check.
  )
  .catch(error => {
    // Handle error.
  });
```

## File download

File downloads, for example `onfido.downloadDocument(documentId, {responseType: 'arraybuffer'})`, will return an instance of a specific object for this endpoint.

These objects will have a content type, e.g. `image/png`.

```js
download.headers['content-type'];
```

Call `slice()` to get a `Blob` of the download:

```js
const blob = download.data.slice();
```

## File upload

For some common types of streams, like instances of `fs.ReadStream`, you can provide the stream directly:

```js
onfido.uploadDocument("passport", "<APPLICANT_ID>", fs.createReadStream("path/to/passport.png"));
```

## More documentation

More documentation and code examples can be found at <https://documentation.onfido.com>

## Support

Should you encounter any technical issues during integration, please contact Onfidoâ€™s Customer Support team
via [email](mailto:support@onfido.com), including the word ISSUE: at the start of the subject line.

Alternatively, you can search the support documentation available via the customer experience
portal, [public.support.onfido.com](http://public.support.onfido.com).

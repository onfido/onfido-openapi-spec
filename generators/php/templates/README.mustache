# Onfido PHP Library

The official PHP library for integrating with the Onfido API.

Documentation can be found at <{{ documentationUrl }}>.

This version uses Onfido API {{ apiVersion }}. Refer to our [API versioning guide](https://developers.onfido.com/guide/api-versioning-policy#client-libraries) for details of which client library versions use which versions of the API.

## Installation & Usage

### Requirements

PHP 7.4 and later. Should also work with PHP 8.0.

[![Latest release](https://badge.fury.io/ph/{{ gitUserId }}%2F{{ gitRepoId }}.svg)](https://badge.fury.io/ph/{{ gitUserId }}%2F{{ gitRepoId }})
![Build Status](https://github.com/{{ gitUserId }}/{{ gitRepoId }}/actions/workflows/php.yml/badge.svg)

### Installation

#### Composer

To install the bindings via [Composer](https://getcomposer.org/), add the following to `composer.json`:

```json
{
  "repositories": [
    {
      "type": "vcs",
      "url": "https://{{ gitHost }}/{{ gitUserId }}/{{ gitRepoId }}.git"
    }
  ],
  "require": {
    "{{ gitUserId }}/{{ gitRepoId }}": "*@dev"
  }
}
```

Then run `composer install`

#### Manual Installation

Download the files and include `autoload.php`:

```php
<?php
require_once('/path/to/{{ packageName }}/vendor/autoload.php');
```

## Getting Started

Please follow the [installation instructions](#installation--usage) and then run the following:

```php
<?php
require_once(__DIR__ . '/vendor/autoload.php');

$configuration = {{ invokerPackage }}\Configuration::getDefaultConfiguration();
$configuration->setApiToken($_ENV['ONFIDO_API_TOKEN']);
$configuration->setRegion({{ invokerPackage }}\Region::EU);   // Supports `Region::EU`, `Region::US`, and `Region::CA`

$onfidoApi = new {{ invokerPackage }}\Api\DefaultApi(
              new \GuzzleHttp\Client([
                  'timeout'  => 30,
                  'connect_timeout' => 30,
                  'read_timeout' => 30
              ]), $configuration);

```

### Making a call to the API

```php
try {
  $applicant = $onfidoApi->createApplicant(
      new {{ invokerPackage }}\Model\ApplicantBuilder(
          [
              'first_name' => 'First',
              'last_name' => 'Last'
          ])
  );

  // To access the information use the getter for the desired property on the object, for example:
  $applicant->getFirstName();

  // ...

} catch ({{ invokerPackage }}\ApiException $ex) {
  // Handle API exception
  echo 'Caught exception: ',  $ex->getMessage(), "\n";
}
```

### Webhook event verification

Webhook events payload needs to be verified before it can be accessed. The library allows easy decoding of the payload and verification of its signature before returning it as an object for user convenience:

```php
try {
  $verifier = new Onfido\WebhookEventVerifier(getenv('ONFIDO_WEBHOOK_SECRET_TOKEN'));

  $signature = 'a0...760e';

  $event = $verifier->readPayload('{"payload":{"r...3"}}', $signature);
} catch ({{invokerPackage}}\OnfidoInvalidSignatureError $ex) {
  // Invalid webhook signature
}
```

### Recommendations

#### Do not use square bracket syntax

Except for accessing Task object's outputs, avoid using the square bracket syntax (i.e. `[]`) to access undefined properties to prevent breaking changes when these fields appear.

{{ >README_footer }}

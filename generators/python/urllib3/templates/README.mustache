# Onfido Python Library

The official Python library for integrating with the Onfido API.

Documentation is available at <{{ documentationUrl }}>.

This version uses Onfido API {{ apiVersion }}. Refer to our [API versioning guide](https://developers.onfido.com/guide/api-versioning-policy#client-libraries) for details. It explains which client library versions use which versions of the API.

[![PyPI version](https://badge.fury.io/py/{{ distributionPackageName }}.svg)](https://badge.fury.io/py/{{ distributionPackageName }})
![Build Status](https://github.com/{{ gitUserId }}/{{ gitRepoId }}/actions/workflows/python.yml/badge.svg)

## Installation & Usage

### Requirements

Python {{ generatorLanguageVersion }}

### Installation

#### Pip

If the Python package is hosted on a repository, you can install it directly using:

```sh
pip install {{ distributionPackageName }}
```

Then import the package:

```python
import {{ packageName }}
```

#### Poetry

```sh
poetry add {{ distributionPackageName }}
```

Then import the package:

```python
import {{ packageName }}
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Import the `DefaultApi` object, this is the main object used for interfacing with the API:

```python
import {{ packageName }}

import urllib3
from os import environ

configuration = {{ packageName }}.Configuration(
    api_token=environ['ONFIDO_API_TOKEN'],
    region={{ packageName }}.configuration.Region.EU,     # Supports `EU`, `US` and `CA`
    timeout=urllib3.util.Timeout(connect=60.0, read=60.0)
  )

with {{ packageName }}.ApiClient(configuration) as api_client:
  onfido_api = onfido.DefaultApi(api_client)
  ...
```

NB: by default, timeout values are set to 30 seconds. You can change the default timeout values by setting the `timeout` parameter in the `Configuration` object, as shown in the example above.

### Making a call to the API

```python
  try:
    applicant = onfido_api.create_applicant(
        onfido.ApplicantBuilder(
          first_name= 'First',
          last_name= 'Last')
      )

    # To access the information access the desired property on the object, for example:
    applicant.first_name

    # ...

  except OpenApiException:
    # ...
    pass
  except Exception:
    # ...
    pass
```

Specific exception types are defined into [exceptions.py](onfido/exceptions.py).

### Webhook event verification

{{ >README_webhook_verification }}

```python
  try:
    verifier = {{ packageName }}.WebhookEventVerifier(os.environ["ONFIDO_WEBHOOK_SECRET_TOKEN"])

    signature = "a0...760e"

    event = verifier.read_payload('{"payload":{"r...3"}}', signature)
  except onfido.OnfidoInvalidSignatureError:
    # Invalid webhook signature
    pass
```

### Recommendations

#### Do not use additional properties

Except for accessing Task object's outputs, avoid using the `additional_properties` dictionary to access undefined properties to prevent breaking changes when these fields appear.

{{ >README_footer }}

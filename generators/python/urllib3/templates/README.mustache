# Onfido Python Library

The official Python library for integrating with the Onfido API.

Documentation can be found at <{{ documentationUrl }}>.

This version uses Onfido API {{ apiVersion }}. Refer to our [API versioning guide](https://developers.onfido.com/guide/api-versioning-policy#client-libraries) for details of which client library versions use which versions of the API.

## Installation & Usage

### Requirements

Python {{{generatorLanguageVersion}}}

### Installation

#### Pip

If the python package is hosted on a repository, you can install directly using:

```sh
pip install {{{distributionPackageName}}}
```

Then import the package:

```python
import {{{packageName}}}
```

#### Poetry

```sh
poetry add {{{distributionPackageName}}}
```

Then import the package:

```python
import {{{packageName}}}
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Import the `DefaultApi` object, this is the main object used for interfacing with the API:

```python
import {{{packageName}}}

import urllib3
from os import environ

configuration = {{{packageName}}}.Configuration(
    api_token=environ['ONFIDO_API_TOKEN'],
    region={{{packageName}}}.configuration.Region.EU,     # Supports `EU`, `US` and `CA`
    timeout=urllib3.util.Timeout(connect=60.0, read=60.0)
  )

with {{{packageName}}}.ApiClient(configuration) as api_client:
  onfido_api = onfido.DefaultApi(api_client)
  ...
```

NB: by default, timeout values are set to 30 seconds.

### Making a call to the API

```python
  try:
    applicant = onfido_api.create_applicant(
        onfido.ApplicantBuilder(
          first_name= 'First',
          last_name= 'Last')
      )

    # To access the information access the desired property on the object, for example:
    applicant.first_name

    # ...

  except OpenApiException:
    # ...
    pass
  except Exception:
    # ...
    pass
```

Specific exception types are defined into [exceptions.py](onfido/exceptions.py).

### Webhook event verification

Webhook events payload needs to be verified before it can be accessed. Library allows to easily decode the payload and verify its signature before returning it as an object for user convenience:

```python
  try:
    verifier = {{{packageName}}}.WebhookEventVerifier(os.environ["ONFIDO_WEBHOOK_SECRET_TOKEN"])

    signature = "a0...760e"

    event = verifier.read_payload('{"payload":{"r...3"}}', signature)
  except onfido.OnfidoInvalidSignatureError:
    # Invalid webhook signature
    pass
```

### Recommendations

#### Do not use additional properties

Retain from using `additional_properties` dictionary to access not defined properties to avoid breaking changes when these fields will appear.

{{>README_footer}}

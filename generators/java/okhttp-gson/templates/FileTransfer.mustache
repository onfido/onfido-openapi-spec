{{>licenseInfo}}

package {{invokerPackage}};

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLConnection;
import java.nio.file.Files;

public class FileTransfer  {
  private static final long serialVersionUID = 1L;

  private File file = null;
  private byte[] bytes = null;
  private String filename = null;
  private String contentType = null;

  /**
   * Create a new file transfer using in-memory byte array
   *
   * @param bytes Byte array to include in file transfer
   * @param filename Filename to send together with the transfer
   * @throws ApiException
   */
  public FileTransfer(byte[] bytes, String filename) throws ApiException {
    this(bytes, filename, null);
  }

  /**
   * Create a new file transfer using in-memory byte array
   *
   * @param bytes Byte array to include in file transfer
   * @param filename Filename to send together with the transfer
   * @param contentType Content type to use for this file
   * @throws ApiException
   */
  public FileTransfer(byte[] bytes, String filename, String contentType) throws ApiException {
    this.bytes = bytes;
    this.filename = filename;

    updateContentType(contentType);
  }

  /**
   * Create a new file transfer from a file store on disk
   *
   * @param file File to include in transfer
   * @throws ApiException
   */
  public FileTransfer(File file) throws ApiException {
    this(file, null);
  }

  /**
   * @param file File to include in transfer
   * @param contentType Content type to use for this file
   * @throws ApiException
   */
  public FileTransfer(File file, String contentType) throws ApiException {
    this.file = file;

    updateContentType(contentType);
  }

  /**
   * @return the file, if loaded from disk
   */
  public File getFile() {
    return file;
  }

  /**
   * @return the bytes, if loaded from memory (always the case for downloads)
   */
  public byte[] getBytes() {
    return bytes;
  }

  /**
   * @return the filename associated with this transfer
   */
  public String getFilename() {
    return filename;
  }

  /**
   * @return the content-type associated with this transfer
   */
  public String getContentType() {
    return contentType;
  }

  /**
   * @return the lenght of the file in bytes
   */
  public long length() {
    if ( bytes != null ){
      return bytes.length;
    }
    else if ( file != null ){
      return file.length();
    }
    else {
      return 0;
    }
  }

  /**
   * @param destination
   * @throws ApiException
   */
  public void save(File destination) throws ApiException {
    if ( bytes != null )
    {
      try (FileOutputStream outputStream = new FileOutputStream(destination)) {
        outputStream.write(bytes);
      } catch (IOException e) {
        throw new ApiException(e);
      }
    }
    else
    {
      throw new ApiException("No content to save");
    }
  }

  private void updateContentType(String contentType) throws ApiException {
    if (contentType != null) {
      this.contentType = contentType;
      return;
    }

    try {
      InputStream heading = null;

      if (file != null) {
        heading = new BufferedInputStream(new FileInputStream(file), 16);
        this.filename = file.getName();
      } else if (bytes != null) {
        heading = new ByteArrayInputStream(bytes, 0, 16);
      } else {
        this.contentType = null;
        return;
      }

      this.contentType = URLConnection.guessContentTypeFromStream(heading);

      if (this.contentType == null) {
        this.contentType = URLConnection.guessContentTypeFromName(this.filename);
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
  }
}
